[package]
name = "something_with_bevy"
version = "0.5.4"
edition = "2021"

# ------------------------- Enable a small amount of optimization in the dev profile.
[profile.dev]
opt-level = 1

# ------------------------- Enable a large amount of optimization in the dev profile for dependencies.
[profile.dev.package."*"]
opt-level = 3

# ------------------------- Release Mode Optimizations
# Enable more optimization in the release profile at the cost of compile time.
[profile.release]
# Compile the entire crate as one unit.
# Slows compile times, marginal improvements.
codegen-units = 1
# Do a second optimization pass over the entire program, including dependencies.
# Slows compile times, marginal improvements.
lto = "thin"

# ------------------------- Alternative Linker
# for Linux
[target.x86_64-unknown-linux-gnu]
linker = "clang"
rustflags = ["-C", "link-arg=-fuse-ld=lld"]

# for Windows
[target.x86_64-pc-windows-msvc]
linker = "rust-lld.exe"

[dependencies]
bevy_egui = "0.32.0"

[dependencies.bevy]
version = "0.15.1"
default-features = false
features = [
    # ----- DEFAULT DEATURES -----
    #    "android-game-activity", # Android GameActivity support. Default, choose between this and android-native-activity.
    #    "android_shared_stdcxx", # Enable using a shared stdlib for cxx on Android
    "animation", # Enable animation support, and glTF animation loading
    "bevy_animation", # Provides animation functionality
    "bevy_asset", # Provides asset functionality
    "bevy_audio", # Provides audio functionality
    "bevy_color", # Provides shared color types and operations
    "bevy_core_pipeline", # Provides cameras and other basic render pipeline features
    #    "bevy_gilrs", # Adds gamepad support
    "bevy_gizmos", # Adds support for rendering gizmos
    "bevy_gltf", # glTF support
    "bevy_mesh_picking_backend", # Provides an implementation for picking meshes
    "bevy_pbr", # Adds PBR rendering
    "bevy_picking", # Provides picking functionality
    "bevy_render", # Provides rendering functionality
    "bevy_scene", # Provides scene functionality
    "bevy_sprite", # Provides sprite functionality
    "bevy_sprite_picking_backend", # Provides an implementation for picking sprites
    "bevy_state", # Enable built-in global state machines
    "bevy_text", # Provides text functionality
    "bevy_ui", # A custom ECS-driven UI framework
    "bevy_ui_picking_backend", # Provides an implementation for picking UI
    "bevy_window", # Windowing layer
    "bevy_winit", # winit window and input backend
    "custom_cursor", # Enable winit custom cursor support
    "default_font", # Include a default font, containing only ASCII characters, at the cost of a 20kB binary size increase
    "hdr", # HDR image format support
    "ktx2", # KTX2 compressed texture support
    "multi_threaded", # Enables multithreaded parallelism in the engine. Disabling it forces all engine tasks to run on a single thread.
    "png", # PNG image format support
    "smaa_luts", # Include SMAA Look Up Tables KTX2 Files
    "sysinfo_plugin", # Enables system information diagnostic plugin
    "tonemapping_luts", # Include tonemapping Look Up Tables KTX2 files. If everything is pink, you need to enable this feature or change the Tonemapping method for your Camera2d or Camera3d.
    "vorbis", # OGG/VORBIS audio format support
    "webgl2", # Enable some limitations to be able to use WebGL2.
    #    "x11", # X11 display server support
    "zstd", # For KTX2 supercompression

    #    # ----- OPTIONAL FEATURES -----
    #    "accesskit_unix", # Enable AccessKit on Unix backends (currently only works with experimental screen readers and forks.)
    #    "android-native-activity", # Android NativeActivity support. Legacy, should be avoided for most new Android games.
    #    "asset_processor", # Enables the built-in asset processor for processed assets.
    #    "async-io", # Use async-io's implementation of block_on instead of futures-lite's implementation.
    "basis-universal", # Basis Universal compressed texture support
    #    "bevy_ci_testing", # Enable systems that allow for automated testing on CI
    #    "bevy_debug_stepping", # Enable stepping-based debugging of Bevy systems
    #    "bevy_dev_tools", # Provides a collection of developer tools
    #    "bevy_image", # Load and access image data. Usually added by an image format
    #    "bevy_remote", # Enable the Bevy Remote Protocol
    #    "bevy_ui_debug", # Provides a debug overlay for bevy UI
    #    "bmp", # BMP image format support
    #    "dds", # DDS compressed texture support
    #    "debug_glam_assert", # Enable assertions in debug builds to check the validity of parameters passed to glam
    #    "detailed_trace", # Enable detailed trace event logging.
    "dynamic_linking", # Force dynamic linking, which improves iterative compile times
    "embedded_watcher", # Enables watching in memory asset providers for Bevy Asset hot-reloading
    #    "experimental_pbr_pcss", # Enable support for PCSS.
    #    "exr", # EXR image format support
    #    "ff", # Farbfeld image format support
    "file_watcher", # Enables watching the filesystem for Bevy Asset hot-reloading
    #    "flac", # FLAC audio format support
    #    "ghost_nodes", # Experimental support for nodes that are ignored for UI layouting
    #    "gif", # GIF image format support
    #    "glam_assert", # Enable assertions to check the validity of parameters passed to glam
    #    "ico", # ICO image format support
    #    "ios_simulator", # Enable support for the ios_simulator by downgrading some rendering capabilities
    #    "jpeg", # JPEG image format support
    #    "meshlet", # Enables the meshlet renderer for dense high-poly scenes (experimental)
    #    "meshlet_processor", # Enables processing meshes into meshlet meshes for bevy_pbr
    #    "minimp3", # MP3 audio format support (through minimp3)
    #    "mp3", # MP3 audio format support
    #    "pbr_anisotropy_texture", # Enable support for anisotropy texture in the StandardMaterial.
    #    "pbr_multi_layer_material_textures", # Enable support for multi-layer material textures in the StandardMaterial.
    #    "pbr_specular_textures", # Enable support for specular textures in the StandardMaterial.
    #    "pbr_transmission_textures", # Enable support for transmission-related textures in the StandardMaterial.
    #    "pnm", # PNM image format support, includes pam, pbm, pgm and ppm
    #    "qoi", # QOI image format support
    #    "reflect_functions", # Enable function reflection
    #    "serialize", # Enable serialization support through serde
    #    "shader_format_glsl", # Enable support for shaders in GLSL
    #    "shader_format_spirv", # Enable support for shaders in SPIR-V
    #    "spirv_shader_passthrough", # Enable passthrough loading for SPIR-V shaders
    #    "symphonia-aac", # AAC audio format support (through symphonia)
    #    "symphonia-all", # AAC, FLAC, MP3, MP4, OGG/VORBIS, and WAV audio formats support (through symphonia)
    #    "symphonia-flac", # FLAC audio format support (through symphonia)
    #    "symphonia-isomp4", # MP4 audio format support (through symphonia)
    #    "symphonia-vorbis", # OGG/VORBIS audio format support (through symphonia)
    #    "symphonia-wav", # WAV audio format support (through symphonia)
    #    "tga", # TGA image format support
    #    "tiff", # TIFF image format support
    #    "trace", # Tracing support
    #    "trace_chrome", # Tracing support, saving a file in Chrome Tracing format
    #    "trace_tracy", # Tracing support, exposing a port for Tracy
    #    "trace_tracy_memory", # Tracing support, with memory profiling, exposing a port for Tracy
    #    "track_location", # Enables source location tracking for change detection and spawning/despawning
    #    "wav", # WAV audio format support
    "wayland", # Wayland display server support
    #    "webgpu", # Enable support for WebGPU in Wasm.
    #    "webp", # WebP image format support
    "zlib", # For KTX2 supercompression
]